#!/usr/bin/perl
#
#  Script to get GNSS data using the scripts and file cache provided by the GNSS modules.
#

use strict;
use Getopt::Std;
use LINZ::GNSS;
use LINZ::GNSS::FileCache;
use LINZ::GNSS::Time qw/seconds_datetime parse_gnss_date seconds_yearday/;
use LINZ::GNSS::DataRequest qw(REQUESTED COMPLETED UNAVAILABLE PENDING DELAYED INVALID);
use LINZ::GNSS::DataCenter;
eval
{
    require LINZ::BERN::BernUtil;
    require LINZ::BERN::CrdFile;
};
if( $@ )
{
    die "The LINZ::BERN::BernUtil module is not installed\n";
}

my %opts;
getopts('b:d:f:n:ilshc',\%opts);

die "Cannot use -c option with -d, -b, or -n options\n" 
    if $opts{c} && ($opts{b} || $opts{d} || $opts{n});
die "Cannot use -d and -b options\n" if $opts{b} && $opts{d};

my $campaign=$opts{b} || '';
my $dir=$opts{d} || '.';
my $dcname=$opts{n} || '';
my $listonly=$opts{s};

help(!$opts{h}) if $opts{h} || ! @ARGV;

LINZ::BERN::BernUtil::SetBerneseEnv();
LINZ::GNSS::LoadConfig();

my $target=$dir;
if( $campaign )
{
    die "Bernese campaign $campaign does not exist\n"
        if ! -d $ENV{P}.'/'.$campaign;
    $target=LINZ::GNSS::DataCenter::GetCenter('bernese');
}
else
{
    $campaign='local';
}

if( $opts{l} )
{
    printFileTypes();
    exit();
}

if( $listonly && ! @ARGV )
{
    print "Data may be retrieved from the following sources:\n";
    print LINZ::GNSS::DataCenter::SourceDescriptions;
    exit();
}


my $date=shift(@ARGV);

if($date =~ /^now(:?-\d+)?$/i)
{
    my($year,$dayno)=seconds_yearday(parse_gnss_date($date));
    $date=sprintf("%04d:%03d",$year,$dayno);
}

die "Invalid date or date range $date: format as yyyy:ddd or yyyy:ddd-yyyy:ddd\n" 
   if $date !~ /^[12]\d\d\d\:\d\d\d(?:\-(?:[12]\d\d\d\:)?\d\d\d)?$/;

my @input=();
if( $opts{f} )
{
    my $argfile=$opts{f};
    open(my $args,"<",$argfile) || die "Cannot open file $argfile\n";
    push(@input,<$args>);
    close($args);
}
elsif( $opts{i} )
{
    push(@input,<STDIN>);
}
else
{
    push(@input,join(' ',@ARGV));
}

eval
{
    my $cache;
    my %options;
    
    if( $dcname )
    {
        $cache=LINZ::GNSS::DataCenter::GetCenter($dcname);
    }
    else
    {
        $cache=LINZ::GNSS::FileCache::Cache();
        $options{queue}=0;
    }

    my $nrequest=0;
    foreach my $argdata (@input)
    {
        my @args=split(' ',$argdata);

        my $type=shift(@args);
        next if $type eq '';

        my @stations;
        while(my $s= shift @args)
        {
            if( $s =~ /^crd\:(.*)$/i )
            {
                my $filename=$1;
                die "Cannot find Bernese .CRD file $filename\n" if ! -e $filename;
                my $cf=new LINZ::BERN::CrdFile($filename);
                foreach my $mark ($cf->stations())
                {
                    push(@stations,$mark->code());
                }
            }
            else
            {
                push(@stations,$s);
            }
        }

        my $request = join(' ',$type,$date,$stations[0]);
        $request = LINZ::GNSS::DataRequest::Parse($request,$campaign);
        @stations=('NONE') if ! $request->use_station;
        while (my $s=shift @stations)
        {
            $nrequest++;
            $request = join(' ',$type,$date,$s);
            $request = LINZ::GNSS::DataRequest::Parse($request);
            my $reqstr=$type;
            $reqstr .= " for $s" if $s && $request->use_station;
            if( $listonly )
            {
                print "\n",'-'x40,"\n" if $nrequest > 1;
                print "Request: $reqstr\n\n";
                print LINZ::GNSS::DataCenter::SourceDescriptions($request);
                print "\n";
                next;
            }
            my ($status,$when,$files)=$cache->getData($request,$target,%options);
            if( $status eq COMPLETED )
            {
                my $reqstr=$request->type.':'.$request->supplied_subtype;
                $reqstr .= " for $s" if $s && $request->use_station;

                # print $request->status_message,"\n";
                foreach my $f (@$files)
                {
                    print "Retrieved $reqstr: ",$f->filepath,"\n";
                }
            }
            elsif( $status eq PENDING )
            {
                print "Data $reqstr not available until ",seconds_datetime($when),"\n";
            }
            elsif( $status eq DELAYED )
            {
                print "Data $reqstr appears to be delayed - not yet available\n";
            }
            else
            {
                print "Data $reqstr not available\n";
            }
        }
    }
};
if( $@ )
{
    print "Failed: $@\n";
}

sub help
{
    my ($brief)=@_;
    require Pod::Usage;
    Pod::Usage::pod2usage(
    {
        -verbose=>$brief ? 99 : 2,
        -sections=>'Synopsis',
        -exitval=>2,
    });
}

sub printFileTypes
{
    my $types='';
    print "Valid file types:subtypes are\n";

    foreach my $ft (LINZ::GNSS::FileTypeList::types())
    {
        my $ftype=$ft->type.":".$ft->subtype;
        my $fdesc=$ft->name;
        my $usestn=$ft->use_station ? '*' : ' ';
        printf "   %-12s %s\n",$ftype.$usestn,$fdesc;
    }
    print "Types marked with a '*' require a station code\n";
}
__DATA__

=head1 Name

get_gnss_data - retrieve GNSS data via the LINZ::GNSS file cache (by default in the Bernese datapool.  
This script can only be used by a user configured to use the Bernese software.

=head1 Synopsis

    get_gnss_data [options] date type [station ...]
    get_gnss_data [options] -f filename date
    get_gnss_data [options] -i date
    get_gnss_data -l
    get_gnss_data -s
    get_gnss_data -h

=head1 Description

Retrieves GNSS data via the Bernese datapool file cache.
Data is specified by the type/subtype, the date, and for 
RINEX observations, the station name.

Files are retrieved to the current directory unless an
alternative is specified using the -d option.

=head1 Parameters

=over

=item date

The date is specified by year and day of year, eg 2013:020.
A range can be specified as 2013:020-025 or 2013:360-2014:001.

=item type

The data type (eg OBS, ORB) and subtype (eg RAPID, FINAL) can be
specified separated by a ':'.  For example OBS:DAILY, ORB:FINAL.
If the subtype is not defined then the first subtype for the type will
be used (eg FINAL for OBS).  
The valid types and subtypes can be listed with the -l option.

=item station ...

For file types that require a station name one or more stations
can be specified. Station can be specified as crd:filename, in
which case station codes will be extracted from a Bernese .CRD file.

=back

=head1 Options

=over

=item -c

Specifies that the files will be retrieved to the cache, but not copied to a target directory.

=item -n dcname

Specifies that the data will be downloaded from a specific data centre.  

=item -d dirname

Specifies the directory into which files will be downloaded.  The default is the current directory.

=item -b campaign

Specificies the name of a bernese campaign into which files will be loaded.

=item -f filename

Specifies that requests will be read from the specified file.  Each line will be treated as 
as set of arguments (type station ...)

=item -i

Specifies that the requests will be read from the standard input. Each line will be treated as a 
set of arguments (type station ...)

=item -l

Just list the available file types and exit

=item -s

List the data centres and file types that have been configured if no data is requested.  If data has
been requested then list the files that could be downloaded to fill the request.

=back

=head1 See also:

=over

=item LINZ::GNSS POD documentation for the LINZ::GNSS module

=item LINZ::GNSS::FileCache POD documentation for the LINZ::GNSS::FileCache  module used to retrieve the files

=back

=cut
