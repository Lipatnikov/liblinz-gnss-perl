#!/usr/bin/perl
#
# Script to catalog rinex files in a directory tree
#
use strict;
use Archive::Zip;
use File::Find;
use LINZ::GNSS::RinexFile;
use LINZ::Geodetic::Ellipsoid;
use Getopt::Std;
use DBI;

my $opts={};
getopts('rhad:',$opts);
my $recursive=$opts->{r};
my $append=$opts->{a};
my $sqldb=$opts->{d};

help(! $opts->{h}) if $opts->{h} || ! @ARGV;

my $grs80=new LINZ::Geodetic::Ellipsoid(6378388.0,298.257222101);

my $rinex_re=qr/\.\d\d[od](?:\.(?:z|gz(?:ip)?))?/i;
my $zip_re=qr/\.zip$/i;

sub format_time
{
    my($sec,$min,$hour,$mday,$mon,$year)=gmtime($_[0]);
    return sprintf("%04d-%02d-%02d %02d:%02d:%02d",$year+1900,$mon+1,$mday,$hour,$min,$sec);

}

sub scanRinex
{
    my($filename,$source,$filesize,$filedate,$func)=@_;
    my $basename=$source;
    $basename=~s/.*[^\\\/\:]//;
    eval
    {
        my $rf=new LINZ::GNSS::RinexFile($filename);
        my $st=$rf->starttime;
        my $et=$rf->endtime;
        my $types=$rf->obstypes;
        my $llh=$grs80->geog($rf->xyz);
        my $hen=$rf->delta_hen;
        my $ot=join(":",sort @$types);
        $func->(
            $basename,
            $filesize,
            format_time($filedate),
            $rf->markname,
            $rf->marknumber,
            $rf->anttype,
            $rf->rectype,
            format_time($st),
            format_time($et),
            $et-$st,
            $rf->interval,
            $rf->nobs,
            $ot,
            $hen->[0],
            $hen->[1],
            $hen->[2],
            $llh->lon,
            $llh->lat,
            $source
           );
    };
    if( $@ )
    {
        print STDERR "$source: $@\n";
    }
}

sub scanFile
{
    my ($file,$source,$func)=@_;
    if( ! -f $file )
    {
        print STDERR "Cannot open file: $file (from $source)\n" if ! -e $file;
        return;
    }
    eval
    {
        my ($filesize,$filedate)=(stat($file))[7,9];
        my $command='';
        my $s1=$source;
        if( $s1 =~ /\.z$/i )
        {
            $command="compress -d < \"$file\"";
            $s1=~ $`;
        }
        elsif( $s1 =~ /\.gz(ip)?$/i )
        {
            $command="gzip -d < \"$file\"";
            $s1=~ $`;
        }
        if( $s1=~ /\.\d\dd$/i )
        {
            $command = $command ? $command . ' | CRX2RNX' : "CRX2RNX < \"$file\"";
        }
        # print "$command\n";
        my $localfile=$file;
        if( $command )
        {
            $localfile ='lrtmpzdc';
            $command=$command." > $localfile";
            system($command);
        }
        scanRinex($localfile,$source,$filesize,$filedate,$func);
        unlink($localfile) if $localfile ne $file;

    };
    if( $@ )
    {
        print STDERR "Error processing $file from $source: $@\n";
    }
}

sub scanZip
{
    my($zipfile,$func)=@_;
    eval
    {
        # print "Processing zip $zipfile\n";
        my $zf=new Archive::Zip($zipfile);
        foreach my $f ($zf->membersMatching($rinex_re))
        {
            my $fn=$f->fileName;
            my $localname='lrtmpzz';
            $f->extractToFileNamed($localname);
            scanFile($localname,"$zipfile:$fn",$func);
            unlink $localname if -e $localname;
        }
    };
    if( $@ )
    {
        print STDERR "zipfile $zipfile: $@\n";
    }
}

sub scanZipOrFile
{
    my ($file,$func)=@_;
    if( $file=~/$zip_re/ )
    {
        scanZip($file,$func);
    }
    elsif( $file =~ /$rinex_re/ )
    {
        scanFile($file,$file,$func);
    }
}

sub scan
{
    my($file,$func)=@_;
    if( -d $file )
    {
        return if ! $recursive;
        find(  {
            wanted=>sub {scanZipOrFile($_,$func) if -f $_},
            no_chdir=>1,
            },
            $file
            );
    }
    else
    {
        scanZipOrFile($file,$func);
    }

}


my $func;
my $finish;
if( $sqldb )
{
    my $create_sql=<<EOD;
        create table if not exists rinex(
            id integer primary key not null,
            file varchar(50),
            size integer,
            date datetime,
            mark varchar(4),
            number varchar(20),
            antenna varchar(20),
            receiver varchar(20),
            start_time datetime,
            end_time datetime,
            duration integer,
            interval integer,
            nobs integer,
            obstypes varchar(200),
            deltah double,
            deltae double,
            deltan double,
            lon double,
            lat double,
            sourcefile varchar(255)
            )
EOD
    my $insert_sql=<<EOD;
        insert into rinex (
            file,
            size,
            date,
            mark,
            number,
            antenna,
            receiver,
            start_time,
            end_time,
            duration,
            interval,
            nobs,
            obstypes,
            deltah,
            deltae,
            deltan,
            lon,
            lat,
            sourcefile) 
        values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
EOD
    unlink $sqldb if -f $sqldb && ! $append;
    my $dbh=DBI->connect("dbi:SQLite:dbname=$sqldb","","");
    die "Cannot open SQLite database $sqldb\n" if ! $dbh;
    $dbh->do($create_sql);
    $func=sub{ $dbh->do($insert_sql,{},@_); };
    $finish=sub { $dbh->disconnect(); };
}
else
{
    print "file\tsize\tdate\tmark\tnumber\tantenna\treceiver\tstart_time\tend_time\tduration\tinterval\tnobs\tobstypes\tdeltah\tdeltae\tdeltan\tlon\tlat\tsourcefile\n" if ! $append;

    $func=sub{ print join("\t",@_),"\n"; };
    $finish=sub{};
}

foreach my $f (@ARGV)
{
    scan($f,$func);
}
$finish->();

sub help
{
    my ($brief)=@_;
    require Pod::Usage;
    Pod::Usage::pod2usage(
    {
        -verbose=>$brief ? 99 : 2,
        -sections=>'Synopsis',
        -exitval=>2,
    });
}

__DATA__

=head1 Name

scan_rinex_files - Summarises the contents of RINEX files.

=head1 Synopsis

    scan_rinex_files [-d dbfile] [-r] [-a] file_or_dir ... > files.csv
    scan_rinex_files -h

=head1 Description

The scan_rinex_files command scans a specified list of files, identifying RINEX files 
summarising their content in CSV format.  The RINEX files can be Hatanaka compressed, 
gzipped or unix compressed, and inside zip files.

If the -d (database) option is specified then the data are written to an SQLite database
file, otherwise they are written in CSV format to stdout. 

If the -r (recursive) option is specified then the list of files can include
directories that will be scanned recursively.

If the -a (append) option is specified then the file header is omitted from the output if
writing to stdout, and the database file is not overwritten if using SQLite.

=cut

