#!/usr/bin/perl
#
# Script to catalog rinex files in a directory tree
#
use strict;
use Archive::Zip;
use File::Find;
use LINZ::GNSS::SinexFile;
use Getopt::Std;

my $opts={};
getopts('vrha',$opts);
my $recursive=$opts->{r};
my $append=$opts->{a};
my $verbose=$opts->{v};

help(! $opts->{h}) if $opts->{h} || @ARGV < 2;

my $zip_re=qr/\.zip$/i;

sub format_time
{
    my($sec,$min,$hour,$mday,$mon,$year)=gmtime($_[0]);
    return sprintf("%04d-%02d-%02d %02d:%02d:%02d",$year+1900,$mon+1,$mday,$hour,$min,$sec);

}

sub scanSinex
{
    my($of,$filename,$source,$filesize,$filedate)=@_;
    my $basename=$source;
    $basename=~s/.*[\\\/\:]//;
    eval
    {
        open(my $tf,"<$filename") || die;
        my $sig;
        read($tf,$sig,5,0);
        close($tf);
        return if $sig ne "%=SNX";

        my $sf=LINZ::GNSS::SinexFile->new($filename);
        foreach my $stn ($sf->stations)
        {
            my $xyz=$stn->{xyz};
            print $of join("\t",
            $basename,
            $filesize,
            format_time($filedate),
            $stn->{code},
            format_time($stn->{epoch}),
            $xyz->[0],
            $xyz->[1],
            $xyz->[2],
            $source
           ),"\n";
       }
    };
    if( $@ )
    {
        print STDERR "$source: $@\n";
    }
}

sub scanFile
{
    my ($of,$file,$source)=@_;
    print "Processing $source\n" if $verbose;
    if( ! -f $file )
    {
        print STDERR "Cannot open file: $file (from $source)\n" if ! -e $file;
        return;
    }
    eval
    {
        my ($filesize,$filedate)=(stat($file))[7,9];
        my $command='';
        my $s1=$source;
        if(0){}
        elsif( $s1 =~ /\.z$/i )
        {
            $command="compress -d < \"$file\"";
            $s1=~ $`;
        }
        elsif( $s1 =~ /\.gz(ip)?$/i )
        {
            $command="gzip -d < \"$file\"";
            $s1=~ $`;
        }
        # print "$command\n";
        my $localfile=$file;
        if( $command )
        {
            $localfile ='lrtmpzdc';
            $command=$command." > $localfile";
            system($command);
        }
        scanSinex($of,$localfile,$source,$filesize,$filedate);
        unlink($localfile) if $localfile ne $file;

    };
    if( $@ )
    {
        print STDERR "Error processing $file from $source: $@\n";
    }
}

sub scanZip
{
    my($of,$zipfile)=@_;
    eval
    {
        print "Processing zip $zipfile\n" if $verbose;
        my $zf=new Archive::Zip($zipfile);
        foreach my $f ($zf->members())
        {
            next if ! $f->isTextFile;
            my $fn=$f->fileName;
            my $localname='lrtmpzz';
            $f->extractToFileNamed($localname);
            scanFile($of,$localname,"$zipfile:$fn");
            unlink $localname if -e $localname;
        }
    };
    if( $@ )
    {
        print STDERR "zipfile $zipfile: $@\n";
    }
}

sub scanZipOrFile
{
    my ($of,$file)=@_;
    if( $file=~/$zip_re/ )
    {
        scanZip($of,$file);
    }
    else
    {
        scanFile($of,$file,$file);
    }
}

sub scan
{
    my($of,$file)=@_;
    if( -d $file )
    {
        return if ! $recursive;
        print "Scanning directory $file\n" if $verbose;
        find(  {
            wanted=>sub {scanZipOrFile($of,$_) if -f $_},
            no_chdir=>1,
            },
            $file
            );
    }
    else
    {
        scanZipOrFile($file);
    }

}





my $ofile=shift(@ARGV);
open( my $of, $append ? '>>' : '>',  $ofile ) || die "Cannot open output file $ofile\n";
{my $h=select($of); $|=1; select($h)}

print $of "file\tsize\tdate\tmark\tdate\tX\tY\tZ\tsourcefile\n" if ! $append;
foreach my $f (@ARGV)
{
    scan($of,$f);
}

sub help
{
    my ($brief)=@_;
    require Pod::Usage;
    Pod::Usage::pod2usage(
    {
        -verbose=>$brief ? 99 : 2,
        -sections=>'Synopsis',
        -exitval=>2,
    });
}

__DATA__

=head1 Name

scan_sinex_files - Summarises the contents of SINEX files.

=head1 Synopsis

    scan_sinex_files [-r] [-a] output_file file_or_dir ... 
    scan_sinex_files -h

=head1 Description

The scan_sinex_files command scans a specified list of files, identifying SINEX files 
summarising their content in CSV format.  The SINEX files can be Hatanaka compressed, 
gzipped or unix compressed, and inside zip files.

If the -r (recursive) option is specified then the list of files can include
directories that will be scanned recursively.

If the -a (append) option is specified then the file header is omitted from the output.

=cut

